generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  passwordHash  String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  characters    Character[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Character {
  id          String           @id @default(cuid())
  name        String
  avatarUrl   String?
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  preferences Json?
  actions     Action[]
  modifiers   ActionModifier[]
  RollGroup   RollGroup[]
}

model Action {
  id          String    @id @default(cuid())
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  name        String    @db.VarChar(25)
  favorite    Boolean   @default(false)
  factorsJson Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([characterId])
}

model ActionModifier {
  id          String    @id @default(cuid())
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  name        String    @db.VarChar(25)
  favorite    Boolean   @default(false)
  factorsJson Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([characterId])
}

model RollGroup {
  id          String    @id @default(cuid())
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  data        Json
  createdAt   DateTime  @default(now())

  @@index([characterId, createdAt])
}
